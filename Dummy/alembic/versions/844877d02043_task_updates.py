"""task updates

Revision ID: 844877d02043
Revises: 
Create Date: 2023-11-09 14:27:45.849899

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "844877d02043"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_task_id", table_name="task")
    op.drop_table("task")
    op.drop_index("ix_project_evaluation_id", table_name="project_evaluation")
    op.drop_table("project_evaluation")
    op.drop_index("ix_audit_test_id", table_name="audit_test")
    op.drop_table("audit_test")
    op.drop_index("ix_risk_score_id", table_name="risk_score")
    op.drop_table("risk_score")
    op.drop_index("ix_control_phase_id", table_name="control_phase")
    op.drop_table("control_phase")
    op.drop_index("ix_tenant_id", table_name="tenant")
    op.drop_table("tenant")
    op.drop_index("ix_exception_stakeholder_id", table_name="exception_stakeholder")
    op.drop_table("exception_stakeholder")
    op.drop_index("ix_task_audit_test_id", table_name="task_audit_test")
    op.drop_table("task_audit_test")
    op.drop_index("ix_user_id", table_name="user")
    op.drop_table("user")
    op.drop_index("ix_assessment_id", table_name="assessment")
    op.drop_table("assessment")
    op.drop_index("ix_audit_test_stakeholder_id", table_name="audit_test_stakeholder")
    op.drop_table("audit_test_stakeholder")
    op.drop_index("ix_tenant_register_otp_email", table_name="tenant_register_otp")
    op.drop_index("ix_tenant_register_otp_id", table_name="tenant_register_otp")
    op.drop_table("tenant_register_otp")
    op.drop_index("ix_project_group_id", table_name="project_group")
    op.drop_table("project_group")
    op.drop_index("ix_risk_stakeholder_id", table_name="risk_stakeholder")
    op.drop_table("risk_stakeholder")
    op.drop_index("ix_web_hook_event_id", table_name="web_hook_event")
    op.drop_table("web_hook_event")
    op.drop_index("ix_role_id", table_name="role")
    op.drop_table("role")
    op.drop_index("ix_task_history_id", table_name="task_history")
    op.drop_table("task_history")
    op.drop_index("ix_project_id", table_name="project")
    op.drop_table("project")
    op.drop_index("ix_task_child_id", table_name="task_child")
    op.drop_table("task_child")
    op.drop_index("ix_exception_id", table_name="exception")
    op.drop_table("exception")
    op.drop_index("ix_control_id", table_name="control")
    op.drop_table("control")
    op.drop_index("ix_project_control_id", table_name="project_control")
    op.drop_table("project_control")
    op.drop_index("ix_import_framework_id", table_name="import_framework")
    op.drop_table("import_framework")
    op.drop_index("ix_control_status_id", table_name="control_status")
    op.drop_table("control_status")
    op.drop_index("ix_risk_likelihood_id", table_name="risk_likelihood")
    op.drop_table("risk_likelihood")
    op.drop_index("ix_permission_id", table_name="permission")
    op.drop_table("permission")
    op.drop_index("ix_document_id", table_name="document")
    op.drop_table("document")
    op.drop_index("ix_task_risk_id", table_name="task_risk")
    op.drop_table("task_risk")
    op.drop_index("ix_wbs_id", table_name="wbs")
    op.drop_table("wbs")
    op.drop_index("ix_frequency_id", table_name="frequency")
    op.drop_table("frequency")
    op.drop_index("ix_user_invitation_id", table_name="user_invitation")
    op.drop_table("user_invitation")
    op.drop_index("ix_keyword_id", table_name="keyword")
    op.drop_table("keyword")
    op.drop_index("ix_project_user_id", table_name="project_user")
    op.drop_table("project_user")
    op.drop_index("ix_risk_id", table_name="risk")
    op.drop_table("risk")
    op.drop_index("ix_task_document_id", table_name="task_document")
    op.drop_table("task_document")
    op.drop_index("ix_control_family_id", table_name="control_family")
    op.drop_table("control_family")
    op.drop_index("ix_risk_category_id", table_name="risk_category")
    op.drop_table("risk_category")
    op.drop_index("ix_risk_mapping_id", table_name="risk_mapping")
    op.drop_table("risk_mapping")
    op.drop_index("ix_control_class_id", table_name="control_class")
    op.drop_table("control_class")
    op.drop_index("ix_risk_status_id", table_name="risk_status")
    op.drop_table("risk_status")
    op.drop_index("ix_user_pin_project_id", table_name="user_pin_project")
    op.drop_table("user_pin_project")
    op.drop_index("ix_framework_id", table_name="framework")
    op.drop_table("framework")
    op.drop_index("ix_risk_impact_id", table_name="risk_impact")
    op.drop_table("risk_impact")
    op.drop_index("ix_permission_role_id", table_name="permission_role")
    op.drop_table("permission_role")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permission_role",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("permission_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["permission_id"], ["permission.id"], name="permission_role_permission_id_fkey"
        ),
        sa.ForeignKeyConstraint(["role_id"], ["role.id"], name="permission_role_role_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="permission_role_pkey"),
    )
    op.create_index("ix_permission_role_id", "permission_role", ["id"], unique=False)
    op.create_table(
        "risk_impact",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('risk_impact_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="risk_impact_pkey"),
        sa.UniqueConstraint("name", name="risk_impact_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_risk_impact_id", "risk_impact", ["id"], unique=False)
    op.create_table(
        "framework",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('framework_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("keywords", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("is_preloaded", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="framework_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="framework_pkey"),
        sa.UniqueConstraint("name", "tenant_id", name="framework_name_tenant_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_framework_id", "framework", ["id"], unique=False)
    op.create_table(
        "user_pin_project",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"], ["project.id"], name="user_pin_project_project_id_fkey"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="user_pin_project_user_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="user_pin_project_pkey"),
    )
    op.create_index("ix_user_pin_project_id", "user_pin_project", ["id"], unique=False)
    op.create_table(
        "risk_status",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('risk_status_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="risk_status_pkey"),
        sa.UniqueConstraint("name", name="risk_status_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_risk_status_id", "risk_status", ["id"], unique=False)
    op.create_table(
        "control_class",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('control_class_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="control_class_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="control_class_pkey"),
        sa.UniqueConstraint("name", name="control_class_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_control_class_id", "control_class", ["id"], unique=False)
    op.create_table(
        "risk_mapping",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="risk_mapping_pkey"),
        sa.UniqueConstraint("name", name="risk_mapping_name_key"),
    )
    op.create_index("ix_risk_mapping_id", "risk_mapping", ["id"], unique=False)
    op.create_table(
        "risk_category",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('risk_category_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="risk_category_pkey"),
        sa.UniqueConstraint("name", name="risk_category_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_risk_category_id", "risk_category", ["id"], unique=False)
    op.create_table(
        "control_family",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('control_family_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="control_family_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="control_family_pkey"),
        sa.UniqueConstraint("name", name="control_family_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_control_family_id", "control_family", ["id"], unique=False)
    op.create_table(
        "task_document",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("task_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("document_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["document_id"], ["document.id"], name="task_document_document_id_fkey"
        ),
        sa.ForeignKeyConstraint(["task_id"], ["task.id"], name="task_document_task_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="task_document_pkey"),
    )
    op.create_index("ix_task_document_id", "task_document", ["id"], unique=False)
    op.create_table(
        "risk",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('risk_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("project_control_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("audit_test_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("external_reference_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("risk_status_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("risk_impact_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("risk_category_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("risk_score_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("current_likelihood_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("comments", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("keywords", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("additional_notes", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("technology", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "current_impact",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("risk_assessment", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("affected_assets", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("owner_supervisor", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["audit_test_id"], ["audit_test.id"], name="risk_audit_test_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["current_likelihood_id"],
            ["risk_likelihood.id"],
            name="risk_current_likelihood_id_fkey",
        ),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], name="risk_owner_id_fkey"),
        sa.ForeignKeyConstraint(
            ["project_control_id"], ["project_control.id"], name="risk_project_control_id_fkey"
        ),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], name="risk_project_id_fkey"),
        sa.ForeignKeyConstraint(
            ["risk_category_id"], ["risk_category.id"], name="risk_risk_category_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["risk_impact_id"], ["risk_impact.id"], name="risk_risk_impact_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["risk_score_id"], ["risk_score.id"], name="risk_risk_score_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["risk_status_id"], ["risk_status.id"], name="risk_risk_status_id_fkey"
        ),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="risk_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="risk_pkey"),
        sa.UniqueConstraint("name", "project_id", name="risk_name_project_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_risk_id", "risk", ["id"], unique=False)
    op.create_table(
        "project_user",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["project_id"], ["project.id"], name="project_user_project_id_fkey"
        ),
        sa.ForeignKeyConstraint(["role_id"], ["role.id"], name="project_user_role_id_fkey"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="project_user_user_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="project_user_pkey"),
        sa.UniqueConstraint("project_id", "user_id", "role_id", name="project_user_role_key"),
    )
    op.create_index("ix_project_user_id", "project_user", ["id"], unique=False)
    op.create_table(
        "keyword",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="keyword_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="keyword_pkey"),
        sa.UniqueConstraint("name", "tenant_id", name="keyword_name_tenant_key"),
    )
    op.create_index("ix_keyword_id", "keyword", ["id"], unique=False)
    op.create_table(
        "user_invitation",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("email", sa.VARCHAR(length=128), autoincrement=False, nullable=False),
        sa.Column("token", sa.VARCHAR(length=128), autoincrement=False, nullable=False),
        sa.Column("is_used", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("is_expired", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["tenant_id"], ["tenant.id"], name="user_invitation_tenant_id_fkey"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="user_invitation_user_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="user_invitation_pkey"),
    )
    op.create_index("ix_user_invitation_id", "user_invitation", ["id"], unique=False)
    op.create_table(
        "frequency",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="frequency_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="frequency_pkey"),
        sa.UniqueConstraint("name", "tenant_id", name="frequency_name_tenant_key"),
    )
    op.create_index("ix_frequency_id", "frequency", ["id"], unique=False)
    op.create_table(
        "wbs",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('wbs_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], name="wbs_project_id_fkey"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="wbs_user_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="wbs_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_wbs_id", "wbs", ["id"], unique=False)
    op.create_table(
        "task_risk",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("task_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("risk_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["risk_id"], ["risk.id"], name="task_risk_risk_id_fkey"),
        sa.ForeignKeyConstraint(["task_id"], ["task.id"], name="task_risk_task_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="task_risk_pkey"),
    )
    op.create_index("ix_task_risk_id", "task_risk", ["id"], unique=False)
    op.create_table(
        "document",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("file_content_type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "fedrisk_object_type", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("fedrisk_object_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], name="document_project_id_fkey"),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="document_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="document_pkey"),
        sa.UniqueConstraint("name", name="document_name_key"),
        sa.UniqueConstraint("title", name="document_title_key"),
    )
    op.create_index("ix_document_id", "document", ["id"], unique=False)
    op.create_table(
        "permission",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("perm_key", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="permission_pkey"),
        sa.UniqueConstraint("perm_key", name="permission_perm_key_key"),
    )
    op.create_index("ix_permission_id", "permission", ["id"], unique=False)
    op.create_table(
        "risk_likelihood",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('risk_likelihood_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="risk_likelihood_pkey"),
        sa.UniqueConstraint("name", name="risk_likelihood_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_risk_likelihood_id", "risk_likelihood", ["id"], unique=False)
    op.create_table(
        "control_status",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('control_status_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="control_status_pkey"),
        sa.UniqueConstraint("name", name="control_status_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_control_status_id", "control_status", ["id"], unique=False)
    op.create_table(
        "import_framework",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("file_content_type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["tenant_id"], ["tenant.id"], name="import_framework_tenant_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="import_framework_pkey"),
        sa.UniqueConstraint("name", name="import_framework_name_key"),
    )
    op.create_index("ix_import_framework_id", "import_framework", ["id"], unique=False)
    op.create_table(
        "project_control",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('project_control_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("control_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "mitigation_percentage",
            sa.NUMERIC(precision=5, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("control_family_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("control_phase_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("control_status_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("control_class_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["control_class_id"], ["control_class.id"], name="project_control_control_class_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["control_family_id"],
            ["control_family.id"],
            name="project_control_control_family_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["control_id"], ["control.id"], name="project_control_control_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["control_phase_id"], ["control_phase.id"], name="project_control_control_phase_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["control_status_id"],
            ["control_status.id"],
            name="project_control_control_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["project_id"], ["project.id"], name="project_control_project_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="project_control_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_project_control_id", "project_control", ["id"], unique=False)
    op.create_table(
        "control",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('control_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("keywords", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_preloaded", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("framework_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["framework_id"], ["framework.id"], name="control_framework_id_fkey"
        ),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="control_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="control_pkey"),
        sa.UniqueConstraint("name", "tenant_id", name="control_name_tenant_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_control_id", "control", ["id"], unique=False)
    op.create_table(
        "exception",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('exception_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("justification", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("keywords", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("next_review_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column(
            "review_frequency",
            postgresql.ENUM("daily", "weekly", "monthly", "quarterly", name="reviewfrequency"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "review_status",
            postgresql.ENUM(
                "not_started", "in_progress", "completed", name="exceptionreviewstatus"
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("project_control_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], name="exception_owner_id_fkey"),
        sa.ForeignKeyConstraint(
            ["project_control_id"], ["project_control.id"], name="exception_project_control_id_fkey"
        ),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="exception_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="exception_pkey"),
        sa.UniqueConstraint(
            "name", "project_control_id", name="exception_name_project_control_key"
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_exception_id", "exception", ["id"], unique=False)
    op.create_table(
        "task_child",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("parent_task_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("child_task_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["child_task_id"], ["task.id"], name="task_child_child_task_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["parent_task_id"], ["task.id"], name="task_child_parent_task_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="task_child_pkey"),
    )
    op.create_index("ix_task_child_id", "task_child", ["id"], unique=False)
    op.create_table(
        "project",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('project_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("project_group_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("project_admin_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["project_admin_id"], ["user.id"], name="project_project_admin_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["project_group_id"], ["project_group.id"], name="project_project_group_id_fkey"
        ),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="project_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="project_pkey"),
        sa.UniqueConstraint("name", "tenant_id", name="project_name_tenant_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_project_id", "project", ["id"], unique=False)
    op.create_table(
        "task_history",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("old_status", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("new_status", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("comments", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("task_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["task_id"], ["task.id"], name="task_history_task_id_fkey"),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["user.id"], name="task_history_updated_by_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="task_history_pkey"),
    )
    op.create_index("ix_task_history_id", "task_history", ["id"], unique=False)
    op.create_table(
        "role",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('role_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="role_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_role_id", "role", ["id"], unique=False)
    op.create_table(
        "web_hook_event",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("event_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "data", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="web_hook_event_pkey"),
        sa.UniqueConstraint("event_id", name="web_hook_event_event_id_key"),
    )
    op.create_index("ix_web_hook_event_id", "web_hook_event", ["id"], unique=False)
    op.create_table(
        "risk_stakeholder",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("risk_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["risk_id"], ["risk.id"], name="risk_stakeholder_risk_id_fkey"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="risk_stakeholder_user_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="risk_stakeholder_pkey"),
    )
    op.create_index("ix_risk_stakeholder_id", "risk_stakeholder", ["id"], unique=False)
    op.create_table(
        "project_group",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('project_group_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="project_group_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="project_group_pkey"),
        sa.UniqueConstraint("name", "tenant_id", name="project_group_name_tenant_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_project_group_id", "project_group", ["id"], unique=False)
    op.create_table(
        "tenant_register_otp",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("code", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("is_expired", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="tenant_register_otp_pkey"),
    )
    op.create_index("ix_tenant_register_otp_id", "tenant_register_otp", ["id"], unique=False)
    op.create_index("ix_tenant_register_otp_email", "tenant_register_otp", ["email"], unique=False)
    op.create_table(
        "audit_test_stakeholder",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("audit_test_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["audit_test_id"], ["audit_test.id"], name="audit_test_stakeholder_audit_test_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="audit_test_stakeholder_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="audit_test_stakeholder_pkey"),
    )
    op.create_index("ix_audit_test_stakeholder_id", "audit_test_stakeholder", ["id"], unique=False)
    op.create_table(
        "assessment",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("comments", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("keywords", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("not_started", "in_progress", "complete", name="statustype"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "is_assessment_confirmed",
            postgresql.ENUM("yes", "no", name="isassessmentconfirmed"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("project_control_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["project_control_id"],
            ["project_control.id"],
            name="assessment_project_control_id_fkey",
        ),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="assessment_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="assessment_pkey"),
        sa.UniqueConstraint(
            "name", "project_control_id", name="assessment_name_project_control_key"
        ),
    )
    op.create_index("ix_assessment_id", "assessment", ["id"], unique=False)
    op.create_table(
        "user",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('user_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("first_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("last_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("phone_no", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("profile_picture", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_superuser", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("is_tenant_admin", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("is_email_verified", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("system_role", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["system_role"], ["role.id"], name="user_system_role_fkey"),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="user_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
        sa.UniqueConstraint("email", name="user_email_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_user_id", "user", ["id"], unique=False)
    op.create_table(
        "task_audit_test",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("task_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("audit_test_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["audit_test_id"], ["audit_test.id"], name="task_audit_test_audit_test_id_fkey"
        ),
        sa.ForeignKeyConstraint(["task_id"], ["task.id"], name="task_audit_test_task_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="task_audit_test_pkey"),
    )
    op.create_index("ix_task_audit_test_id", "task_audit_test", ["id"], unique=False)
    op.create_table(
        "exception_stakeholder",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("exception_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["exception_id"], ["exception.id"], name="exception_stakeholder_exception_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="exception_stakeholder_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="exception_stakeholder_pkey"),
    )
    op.create_index("ix_exception_stakeholder_id", "exception_stakeholder", ["id"], unique=False)
    op.create_table(
        "tenant",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('tenant_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("user_licence", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("customer_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="tenant_pkey"),
        sa.UniqueConstraint("customer_id", name="tenant_customer_id_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_tenant_id", "tenant", ["id"], unique=False)
    op.create_table(
        "control_phase",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('control_phase_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="control_phase_tenant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="control_phase_pkey"),
        sa.UniqueConstraint("name", name="control_phase_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_control_phase_id", "control_phase", ["id"], unique=False)
    op.create_table(
        "risk_score",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="risk_score_pkey"),
        sa.UniqueConstraint("name", name="risk_score_name_key"),
    )
    op.create_index("ix_risk_score_id", "risk_score", ["id"], unique=False)
    op.create_table(
        "audit_test",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("objective", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("expected_results", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("keywords", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("approximate_time_to_complete", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("external_reference_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("project_control_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("tester_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("due_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "not_started", "on_going", "complete", "on_hold", name="auditteststatus"
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "test_frequency",
            postgresql.ENUM("daily", "weekly", "monthly", "quarterly", name="testfrequency"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("last_test_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["project_control_id"],
            ["project_control.id"],
            name="audit_test_project_control_id_fkey",
        ),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], name="audit_test_project_id_fkey"),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="audit_test_tenant_id_fkey"),
        sa.ForeignKeyConstraint(["tester_id"], ["user.id"], name="audit_test_tester_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="audit_test_pkey"),
        sa.UniqueConstraint("name", "project_id", name="audit_test_name_project_key"),
    )
    op.create_index("ix_audit_test_id", "audit_test", ["id"], unique=False)
    op.create_table(
        "project_evaluation",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("comments", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("keywords", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("not_started", "in_progress", "complete", name="statustype"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"], ["project.id"], name="project_evaluation_project_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"], ["tenant.id"], name="project_evaluation_tenant_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="project_evaluation_pkey"),
        sa.UniqueConstraint("name", "project_id", name="project_evaluation_name_project_key"),
    )
    op.create_index("ix_project_evaluation_id", "project_evaluation", ["id"], unique=False)
    op.create_table(
        "task",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("title", sa.VARCHAR(length=30), autoincrement=False, nullable=True),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.Column(
            "priority",
            postgresql.ENUM("low", "high", "medium", "immediate", name="taskpriority"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "status",
            postgresql.ENUM("not_started", "in_progress", "complete", name="taskstatus"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("due_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column(
            "fedrisk_object_type", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("fedrisk_object_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("wbs_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("actual_start_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("actual_end_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("duration", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("percent_complete", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("milestone", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("assigned_to", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("estimated_loe", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("actual_loe", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "estimated_cost",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "actual_cost",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("child_task_order", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["assigned_to"], ["user.id"], name="task_assigned_to_fkey"),
        sa.ForeignKeyConstraint(["project_id"], ["project.id"], name="task_project_id_fkey"),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenant.id"], name="task_tenant_id_fkey"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="task_user_id_fkey"),
        sa.ForeignKeyConstraint(["wbs_id"], ["wbs.id"], name="task_wbs_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="task_pkey"),
    )
    op.create_index("ix_task_id", "task", ["id"], unique=False)
    # ### end Alembic commands ###
