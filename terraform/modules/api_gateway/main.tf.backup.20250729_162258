# =============================================================================
# DATA SOURCES
# =============================================================================

data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

# =============================================================================
# LOCAL VALUES - Dynamic ARN generation
# =============================================================================

locals {
  # Determine AWS partition based on region
  aws_partition = startswith(data.aws_region.current.name, "us-gov-") ? "aws-us-gov" : "aws"
  
  # Dynamic API Gateway URL
  api_base_url = "https://${aws_api_gateway_rest_api.ksi_api.id}.execute-api.${data.aws_region.current.name}.amazonaws.com/${var.environment}"
  
  # Dynamic Lambda function ARNs
  orchestrator_lambda_arn = "arn:${local.aws_partition}:lambda:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:function:${var.project_name}-orchestrator-${var.environment}"
  cross_account_validator_arn = "arn:${local.aws_partition}:lambda:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:function:${var.project_name}-cross-account-validator-${var.environment}"
  
  # Dynamic function names
  orchestrator_function_name = "${var.project_name}-orchestrator-${var.environment}"
  cross_account_function_name = "${var.project_name}-cross-account-validator-${var.environment}"
}

# =============================================================================
# IAM ROLE FOR API LAMBDA FUNCTIONS
# =============================================================================

resource "aws_iam_role" "api_lambda_role" {
  name = "${var.project_name}-api-lambda-role-${var.environment}"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
  
  tags = {
    Name = "KSI API Lambda Role"
    Purpose = "Lambda execution role for KSI API functions"
  }
}

# IAM Policy for DynamoDB access
resource "aws_iam_policy" "api_dynamodb_policy" {
  name        = "${var.project_name}-api-dynamodb-policy-${var.environment}"
  description = "Policy for API Lambda functions to access DynamoDB tables"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:Query",
          "dynamodb:Scan",
          "dynamodb:BatchGetItem"
        ]
        Resource = [
          var.ksi_definitions_table_arn,
          var.tenant_ksi_configurations_table_arn,
          var.ksi_execution_history_table_arn,
          "${var.ksi_execution_history_table_arn}/index/*"
        ]
      }
    ]
  })
}

# IAM Policy for Lambda invocation
resource "aws_iam_policy" "api_lambda_invoke_policy" {
  name        = "${var.project_name}-api-lambda-invoke-policy-${var.environment}"
  description = "Policy for API to invoke orchestrator Lambda functions"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "lambda:InvokeFunction"
        ]
        Resource = [
          local.orchestrator_lambda_arn,
          local.cross_account_validator_arn
        ]
      }
    ]
  })
}

# Attach policies to API Lambda role
resource "aws_iam_role_policy_attachment" "api_lambda_basic" {
  policy_arn = "arn:${local.aws_partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.api_lambda_role.name
}

resource "aws_iam_role_policy_attachment" "api_lambda_dynamodb" {
  policy_arn = aws_iam_policy.api_dynamodb_policy.arn
  role       = aws_iam_role.api_lambda_role.name
}

resource "aws_iam_role_policy_attachment" "api_lambda_invoke" {
  policy_arn = aws_iam_policy.api_lambda_invoke_policy.arn
  role       = aws_iam_role.api_lambda_role.name
}

# =============================================================================
# API LAMBDA FUNCTIONS
# =============================================================================

resource "aws_lambda_function" "api_validate" {
  function_name = "${var.project_name}-api-validate-${var.environment}"
  role          = aws_iam_role.api_lambda_role.arn
  handler       = "lambda_function.lambda_handler"
  runtime       = var.lambda_runtime
  timeout       = var.lambda_timeout
  memory_size   = var.lambda_memory_size
  
  filename         = "api-validate.zip"
  source_code_hash = filebase64sha256("api-validate.zip")
  
  environment {
    variables = {
      ENVIRONMENT = var.environment
      ORCHESTRATOR_LAMBDA_ARN = local.orchestrator_lambda_arn
    }
  }
  
  tags = {
    Name = "KSI API Validate"
    Purpose = "API endpoint for triggering KSI validations"
  }
}

resource "aws_lambda_function" "api_executions" {
  function_name = "${var.project_name}-api-executions-${var.environment}"
  role          = aws_iam_role.api_lambda_role.arn
  handler       = "lambda_function.lambda_handler"
  runtime       = var.lambda_runtime
  timeout       = var.lambda_timeout
  memory_size   = var.lambda_memory_size
  
  filename         = "api-executions.zip"
  source_code_hash = filebase64sha256("api-executions.zip")
  
  environment {
    variables = {
      ENVIRONMENT = var.environment
      KSI_EXECUTION_HISTORY_TABLE = var.ksi_execution_history_table
    }
  }
  
  tags = {
    Name = "KSI API Executions"
    Purpose = "API endpoint for retrieving execution history"
  }
}

resource "aws_lambda_function" "api_results" {
  function_name = "${var.project_name}-api-results-${var.environment}"
  role          = aws_iam_role.api_lambda_role.arn
  handler       = "lambda_function.lambda_handler"
  runtime       = var.lambda_runtime
  timeout       = var.lambda_timeout
  memory_size   = var.lambda_memory_size
  
  filename         = "api-results.zip"
  source_code_hash = filebase64sha256("api-results.zip")
  
  environment {
    variables = {
      ENVIRONMENT = var.environment
      KSI_EXECUTION_HISTORY_TABLE = var.ksi_execution_history_table
      KSI_DEFINITIONS_TABLE = var.ksi_definitions_table
    }
  }
  
  tags = {
    Name = "KSI API Results"
    Purpose = "API endpoint for retrieving KSI validation results"
  }
}

# =============================================================================
# CLOUDWATCH LOG GROUPS
# =============================================================================

resource "aws_cloudwatch_log_group" "api_validate_logs" {
  name              = "/aws/lambda/${aws_lambda_function.api_validate.function_name}"
  retention_in_days = 14
  
  tags = {
    Name = "KSI API Validate Logs"
    Purpose = "Log group for validate API endpoint"
  }
}

resource "aws_cloudwatch_log_group" "api_executions_logs" {
  name              = "/aws/lambda/${aws_lambda_function.api_executions.function_name}"
  retention_in_days = 14
  
  tags = {
    Name = "KSI API Executions Logs"
    Purpose = "Log group for executions API endpoint"
  }
}

resource "aws_cloudwatch_log_group" "api_results_logs" {
  name              = "/aws/lambda/${aws_lambda_function.api_results.function_name}"
  retention_in_days = 14
  
  tags = {
    Name = "KSI API Results Logs"
    Purpose = "Log group for results API endpoint"
  }
}

# =============================================================================
# API GATEWAY REST API
# =============================================================================

resource "aws_api_gateway_rest_api" "ksi_api" {
  name        = "${var.project_name}-api-${var.environment}"
  description = "KSI Validator REST API for FedRAMP 20x compliance validation"
  
  endpoint_configuration {
    types = ["REGIONAL"]
  }

  tags = {
    Name = "KSI Validator API"
    Purpose = "REST API for KSI validation operations"
  }
}

# =============================================================================
# API GATEWAY RESOURCES
# =============================================================================

# /api resource
resource "aws_api_gateway_resource" "api" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  parent_id   = aws_api_gateway_rest_api.ksi_api.root_resource_id
  path_part   = "api"
}

# /api/ksi resource
resource "aws_api_gateway_resource" "ksi" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  parent_id   = aws_api_gateway_resource.api.id
  path_part   = "ksi"
}

# /api/ksi/validate resource
resource "aws_api_gateway_resource" "validate" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  parent_id   = aws_api_gateway_resource.ksi.id
  path_part   = "validate"
}

# /api/ksi/executions resource
resource "aws_api_gateway_resource" "executions" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  parent_id   = aws_api_gateway_resource.ksi.id
  path_part   = "executions"
}

# /api/ksi/results resource
resource "aws_api_gateway_resource" "results" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  parent_id   = aws_api_gateway_resource.ksi.id
  path_part   = "results"
}

# =============================================================================
# API GATEWAY METHODS
# =============================================================================

# POST /api/ksi/validate
resource "aws_api_gateway_method" "validate_post" {
  rest_api_id   = aws_api_gateway_rest_api.ksi_api.id
  resource_id   = aws_api_gateway_resource.validate.id
  http_method   = "POST"
  authorization = "NONE"
}

# GET /api/ksi/executions
resource "aws_api_gateway_method" "executions_get" {
  rest_api_id   = aws_api_gateway_rest_api.ksi_api.id
  resource_id   = aws_api_gateway_resource.executions.id
  http_method   = "GET"
  authorization = "NONE"
}

# GET /api/ksi/results
resource "aws_api_gateway_method" "results_get" {
  rest_api_id   = aws_api_gateway_rest_api.ksi_api.id
  resource_id   = aws_api_gateway_resource.results.id
  http_method   = "GET"
  authorization = "NONE"
}

# CORS OPTIONS methods
resource "aws_api_gateway_method" "validate_options" {
  rest_api_id   = aws_api_gateway_rest_api.ksi_api.id
  resource_id   = aws_api_gateway_resource.validate.id
  http_method   = "OPTIONS"
  authorization = "NONE"
}

resource "aws_api_gateway_method" "executions_options" {
  rest_api_id   = aws_api_gateway_rest_api.ksi_api.id
  resource_id   = aws_api_gateway_resource.executions.id
  http_method   = "OPTIONS"
  authorization = "NONE"
}

resource "aws_api_gateway_method" "results_options" {
  rest_api_id   = aws_api_gateway_rest_api.ksi_api.id
  resource_id   = aws_api_gateway_resource.results.id
  http_method   = "OPTIONS"
  authorization = "NONE"
}

# =============================================================================
# API GATEWAY INTEGRATIONS
# =============================================================================

# POST /api/ksi/validate integration
resource "aws_api_gateway_integration" "validate_post" {
  rest_api_id             = aws_api_gateway_rest_api.ksi_api.id
  resource_id             = aws_api_gateway_resource.validate.id
  http_method             = aws_api_gateway_method.validate_post.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.api_validate.invoke_arn
}

# GET /api/ksi/executions integration
resource "aws_api_gateway_integration" "executions_get" {
  rest_api_id             = aws_api_gateway_rest_api.ksi_api.id
  resource_id             = aws_api_gateway_resource.executions.id
  http_method             = aws_api_gateway_method.executions_get.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.api_executions.invoke_arn
}

# GET /api/ksi/results integration
resource "aws_api_gateway_integration" "results_get" {
  rest_api_id             = aws_api_gateway_rest_api.ksi_api.id
  resource_id             = aws_api_gateway_resource.results.id
  http_method             = aws_api_gateway_method.results_get.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.api_results.invoke_arn
}

# CORS integrations (MOCK type)
resource "aws_api_gateway_integration" "validate_options" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.validate.id
  http_method = aws_api_gateway_method.validate_options.http_method
  type        = "MOCK"
  
  request_templates = {
    "application/json" = "{\"statusCode\": 200}"
  }
}

resource "aws_api_gateway_integration" "executions_options" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.executions.id
  http_method = aws_api_gateway_method.executions_options.http_method
  type        = "MOCK"
  
  request_templates = {
    "application/json" = "{\"statusCode\": 200}"
  }
}

resource "aws_api_gateway_integration" "results_options" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.results.id
  http_method = aws_api_gateway_method.results_options.http_method
  type        = "MOCK"
  
  request_templates = {
    "application/json" = "{\"statusCode\": 200}"
  }
}

# =============================================================================
# METHOD RESPONSES
# =============================================================================

# Validate endpoint responses
resource "aws_api_gateway_method_response" "validate_post_200" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.validate.id
  http_method = aws_api_gateway_method.validate_post.http_method
  status_code = "200"
  
  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin" = false
  }
}

resource "aws_api_gateway_method_response" "validate_options_200" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.validate.id
  http_method = aws_api_gateway_method.validate_options.http_method
  status_code = "200"
  
  response_parameters = {
    "method.response.header.Access-Control-Allow-Headers" = false
    "method.response.header.Access-Control-Allow-Methods" = false
    "method.response.header.Access-Control-Allow-Origin"  = false
  }
}

# Executions endpoint responses
resource "aws_api_gateway_method_response" "executions_get_200" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.executions.id
  http_method = aws_api_gateway_method.executions_get.http_method
  status_code = "200"
  
  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin" = false
  }
}

resource "aws_api_gateway_method_response" "executions_options_200" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.executions.id
  http_method = aws_api_gateway_method.executions_options.http_method
  status_code = "200"
  
  response_parameters = {
    "method.response.header.Access-Control-Allow-Headers" = false
    "method.response.header.Access-Control-Allow-Methods" = false
    "method.response.header.Access-Control-Allow-Origin"  = false
  }
}

# Results endpoint responses
resource "aws_api_gateway_method_response" "results_get_200" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.results.id
  http_method = aws_api_gateway_method.results_get.http_method
  status_code = "200"
  
  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin" = false
  }
}

resource "aws_api_gateway_method_response" "results_options_200" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.results.id
  http_method = aws_api_gateway_method.results_options.http_method
  status_code = "200"
  
  response_parameters = {
    "method.response.header.Access-Control-Allow-Headers" = false
    "method.response.header.Access-Control-Allow-Methods" = false
    "method.response.header.Access-Control-Allow-Origin"  = false
  }
}

# =============================================================================
# INTEGRATION RESPONSES (CORS)
# =============================================================================

resource "aws_api_gateway_integration_response" "validate_options" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.validate.id
  http_method = aws_api_gateway_method.validate_options.http_method
  status_code = aws_api_gateway_method_response.validate_options_200.status_code
  
  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin"  = "'${var.api_cors_allow_origin}'"
    "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    "method.response.header.Access-Control-Allow-Methods" = "'POST,OPTIONS'"
  }
}

resource "aws_api_gateway_integration_response" "executions_options" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.executions.id
  http_method = aws_api_gateway_method.executions_options.http_method
  status_code = aws_api_gateway_method_response.executions_options_200.status_code
  
  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin"  = "'${var.api_cors_allow_origin}'"
    "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    "method.response.header.Access-Control-Allow-Methods" = "'GET,OPTIONS'"
  }
}

resource "aws_api_gateway_integration_response" "results_options" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  resource_id = aws_api_gateway_resource.results.id
  http_method = aws_api_gateway_method.results_options.http_method
  status_code = aws_api_gateway_method_response.results_options_200.status_code
  
  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin"  = "'${var.api_cors_allow_origin}'"
    "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    "method.response.header.Access-Control-Allow-Methods" = "'GET,OPTIONS'"
  }
}

# =============================================================================
# LAMBDA PERMISSIONS
# =============================================================================

resource "aws_lambda_permission" "api_validate" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.api_validate.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.ksi_api.execution_arn}/*/*"
}

resource "aws_lambda_permission" "api_executions" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.api_executions.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.ksi_api.execution_arn}/*/*"
}

resource "aws_lambda_permission" "api_results" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.api_results.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.ksi_api.execution_arn}/*/*"
}

# =============================================================================
# API GATEWAY DEPLOYMENT & STAGE
# =============================================================================

resource "aws_api_gateway_deployment" "ksi_api" {
  rest_api_id = aws_api_gateway_rest_api.ksi_api.id
  
  # Force new deployment when configuration changes
  triggers = {
    redeployment = sha1(jsonencode([
      aws_api_gateway_resource.validate.id,
      aws_api_gateway_method.validate_post.id,
      aws_api_gateway_integration.validate_post.id,
      aws_api_gateway_resource.executions.id,
      aws_api_gateway_method.executions_get.id,
      aws_api_gateway_integration.executions_get.id,
      aws_api_gateway_resource.results.id,
      aws_api_gateway_method.results_get.id,
      aws_api_gateway_integration.results_get.id,
    ]))
  }
  
  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "ksi_api" {
  deployment_id = aws_api_gateway_deployment.ksi_api.id
  rest_api_id   = aws_api_gateway_rest_api.ksi_api.id
  stage_name    = var.environment
  
  tags = {
    Name = "KSI API ${var.environment} Stage"
    Purpose = "API Gateway stage for KSI validation endpoints"
  }
}
